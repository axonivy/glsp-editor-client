pipeline {
  agent any

  options {
    buildDiscarder(logRotator(numToKeepStr: '30', artifactNumToKeepStr: '5'))
  }

  triggers {
    cron '@midnight'
  }

  parameters {
    string(name: 'engineSource', defaultValue: 'https://product.ivyteam.io/', description: 'Engine page url')
  }

  stages {
    stage('Build') {
      steps {
        script {
          catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
            docker.build('node', '-f build/Dockerfile.node .').inside {
              sh 'npm run ci'
              archiveArtifacts 'integration/*/build/**'
            }
          }
        }
      }
    }

    stage('Codechecks (ESLint)') {
      steps {
        script {
          catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
            docker.build('node', '-f build/Dockerfile.node .').inside {
              timeout(30) {
                sh 'npm run lint:ci'
              }
            }
          }
          withChecks('ESLint') {
            recordIssues enabledForFailure: true, publishAllIssues: true, aggregatingResults: true, tools: [esLint(pattern: 'editor/eslint.xml,integration/**/eslint.xml', skipSymbolicLinks: true)], qualityGates: [[threshold: 1, type: 'TOTAL', unstable: true]]
          }
        }
      }
    }

    stage('Tests (Vitest)') {
      steps {
        script {
          catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
            docker.build('node', '-f build/Dockerfile.node .').inside {
              timeout(30) {
                sh 'npm run test:ci'
              }
            }
          }
        }
      }
    }

    stage('Web Tests (Playwright)') {
      steps {
        script {
          docker.build('node-webtest', '-f build/Dockerfile.playwright .').inside {
            sh 'npm install && npm run package'
            dir ('integration/standalone/glsp-test-project') {
              maven cmd: "-ntp verify -Dengine.page.url=${params.engineSource}"
            }
          }
          archiveArtifacts artifacts: 'integration/standalone/test-results/**', allowEmptyArchive: true
          archiveArtifacts artifacts: 'integration/standalone/glsp-test-project/target/**/ivy.log', allowEmptyArchive: true
        }
      }
    }

    stage('Deploy (Maven)') {
      when {
        expression { isReleaseOrMasterBranch() && currentBuild.currentResult == 'SUCCESS' }
      }
      steps {
        script {
          docker.build('maven-build', '-f build/Dockerfile.maven .').inside {
            maven cmd: '-ntp -f integration/eclipse clean deploy -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn'
            maven cmd: '-ntp -f integration/standalone clean deploy -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn'
          }
          archiveArtifacts 'integration/eclipse/target/editor-client-eclipse-*.zip'
          archiveArtifacts 'integration/standalone/target/editor-client-standalone*.jar'
        }
      }
    }
  }
  post {
    always {
      discoverGitReferenceBuild()
      withChecks('Tests') {
        junit testDataPublishers: [[$class: 'StabilityTestDataPublisher']], testResults: 'node_modules/**/report.xml'
      }
    }
  }
}

def isReleaseOrMasterBranch() {
  return env.BRANCH_NAME == 'master' || env.BRANCH_NAME.startsWith('release/') 
}
